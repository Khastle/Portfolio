{"title":"CS50 Lesson 1","markdown":{"yaml":{"title":"CS50 Lesson 1","author":"Ryan curtis","date":"2023-01-07","categories":["CS50","code","analysis"],"image":"cs50.png","jupyter":"python3"},"headingText":"[**Einstein**](https://cs50.harvard.edu/python/2022/psets/0/einstein/#einstein)","containsRefs":false,"markdown":"\n\nI thought it would be fun to track all of my progress learning python, even the VERY humble beginnings. Any of the posts with the CS50 tag are simply copy/pastes of my code from lessons, along with a copy/paste of what the assignment actually wanted me to do for context. As many of these functions rely on user_input, I took the liberty of adding the code simply as text rather than exectuable code as otherwise the page would not work as it would try to get inputs which cannot be given.\n\n\nEven if you haven't studied physics (recently or ever!), you might have heard that E=MC\\^2, wherein E represents energy (measured in Joules), M represents mass (measured in kilograms), and C represents the speed of light (measured approximately as 300000000 meters per second), per [Albert Einstein](https://en.wikipedia.org/wiki/Albert_Einstein) et al. Essentially, the formula means that mass and energy are equivalent.\n\nIn a file called `einstein.py`, implement a program in Python that prompts the user for mass as an integer (in kilograms) and then outputs the equivalent number of Joules as an integer. Assume that the user will input an integer.\n\n```{{python}}\ndef main(): #Get user input \n  user_input = input(\"Mass:\")\n\n#Convert input to integer\n  user_input = int(user_input)\n\n#Multiple Input(mass) by C\\^2 & print the result (E)\n  print(user_input * 90000000000000000)\n\nmain()\n```\n\n# [**Tip Calculator**](https://cs50.harvard.edu/python/2022/psets/0/tip/#tip-calculator)\n\n> And now for my Wizard tip calculator.\n>\n> --- Morty Seinfeld\n\nIn the United States, it's customary to leave a tip for your server after dining in a restaurant, typically an amount equal to 15% or more of your meal's cost. Not to worry, though, we've written a tip calculator for you, below!\n\n```{{python}}\ndef main():\n    dollars = dollars_to_float(input(\"How much was the meal? \"))\n    percent = percent_to_float(input(\"What percentage would you like to tip? \"))\n    tip = dollars * percent\n    print(f\"Leave ${tip:.2f}\")\n\n\ndef dollars_to_float(d):\n    # TODO\n\n\ndef percent_to_float(p):\n    # TODO\n\n\nmain()\n```\n\nWell, we've written *most* of a tip calculator for you. Unfortunately, we didn't have time to implement two functions:\n\n-   `dollars_to_float`, which should accept a `str` as input (formatted as `$##.##`, wherein each `#` is a decimal digit), remove the leading `$`, and return the amount as a `float`. For instance, given `$50.00` as input, it should return `50.0`.\n\n-   `percent_to_float`, which should accept a `str` as input (formatted as `##%`, wherein each `#` is a decimal digit), remove the trailing `%`, and return the percentage as a `float`. For instance, given `15%` as input, it should return `0.15`.\n\nAssume that the user will input values in the expected formats.\n\n```{{python}}\ndef main():\n    #Given code\n    dollars = dollars_to_float(input(\"How much was the meal? \"))\n    percent = percent_to_float(input(\"What percentage would you like to tip? \"))\n    tip = dollars * percent\n    print(f\"leave ${tip:.2f}\")\n\ndef dollars_to_float(d):\n    #Remove dollar sign\n    d = d.removeprefix(\"$\")\n    #Convert to float value & return\n    d = float(d)\n    return(d)\n\ndef percent_to_float(p):\n    #Remove Percent sign\n    p = p.removesuffix(\"%\")\n    #Convert to float & return\n    p = float(p)/100\n    return(p)\n\nmain()\n```\n\n# [**Playback Speed**](https://cs50.harvard.edu/python/2022/psets/0/playback/#playback-speed)\n\nSome people have a habit of lecturing speaking rather quickly, and it'd be nice to slow them down, a la YouTube's 0.75 playback speed, or even by having them pause between words.\n\nIn a file called `playback.py`, implement a program in Python that prompts the user for input and then outputs that same input, replacing each space with `...` (i.e., three periods).\n\n```{{python}}\ndef main():\n    #Get user input\n    user_input = input(\"What sentence would you like to slow down? \")\n\n    #Replace spaces with ellipses\n    user_input = user_input.replace(\" \", \"...\")\n\n    #Print user input with Ellipses to slow down sentence\n    print(user_input)\n\n\n\nmain()\n```\n\n# [**Indoor Voice**](https://cs50.harvard.edu/python/2022/psets/0/indoor/#indoor-voice)\n\nWRITING IN ALL CAPS IS LIKE YELLING.\n\nBest to use your \"indoor voice\" sometimes, writing entirely in lowercase.\n\nIn a file called `indoor.py`, implement a program in Python that prompts the user for input and then outputs that same input in lowercase. Punctuation and whitespace should be outputted unchanged. You're welcome, but not required, to prompt the user explicitly, as by passing a `str` of your own as an argument to `input`.\n\n``` {{python}}\ndef main():\n    #Get user input & Convert to lowercase\n    user_input = input(\"What would you like to say with an indoor voice? \").lower()\n\n    #Print user input\n    print(user_input)\n\n\nmain()\n```\n\n# [**Making Faces**](https://cs50.harvard.edu/python/2022/psets/0/faces/#making-faces)\n\nBefore there were emoji, there were [emoticons](https://en.wikipedia.org/wiki/List_of_emoticons), whereby text like `:)` was a happy face and text like `:(` was a sad face. Nowadays, programs tend to convert emoticons to emoji automatically!\n\nIn a file called `faces.py`, implement a function called `convert` that accepts a `str` as input and returns that same input with any `:)` converted to ![🙂](https://twemoji.maxcdn.com/v/14.0.2/72x72/1f642.png){alt=\"🙂\"} (otherwise known as a [slightly smiling face](https://emojipedia.org/slightly-smiling-face/)) and any `:(` converted to ![🙁](https://twemoji.maxcdn.com/v/14.0.2/72x72/1f641.png){alt=\"🙁\"} (otherwise known as a [slightly frowning face](https://emojipedia.org/slightly-frowning-face/)). All other text should be returned unchanged.\n\nThen, in that same file, implement a function called `main` that prompts the user for input, calls `convert` on that input, and prints the result. You\\'re welcome, but not required, to prompt the user explicitly, as by passing a `str` of your own as an argument to `input`. Be sure to call `main` at the bottom of your file.\n\n```{{python}}\ndef main():\n    #Get user input\n    user_input = input(\"Please input the string for conversion: \")\n\n    #Call Convert to change emoticons to emoji\n    user_input = convert(user_input)\n\n    #Print back to user\n    print(user_input)\n\n\n\ndef convert(sentence):\n    #Convert any happy faces to emoji\n    sentence = sentence.replace(\":)\", \"\\U0001F642\")\n\n    #Convert any sad faces to emoji\n    sentence = sentence.replace(\":(\", \"\\U0001F641\")\n\n    #Return original sentence as output of function\n    return(sentence)\n\nmain()\n```\n","srcMarkdownNoYaml":"\n\nI thought it would be fun to track all of my progress learning python, even the VERY humble beginnings. Any of the posts with the CS50 tag are simply copy/pastes of my code from lessons, along with a copy/paste of what the assignment actually wanted me to do for context. As many of these functions rely on user_input, I took the liberty of adding the code simply as text rather than exectuable code as otherwise the page would not work as it would try to get inputs which cannot be given.\n\n# [**Einstein**](https://cs50.harvard.edu/python/2022/psets/0/einstein/#einstein)\n\nEven if you haven't studied physics (recently or ever!), you might have heard that E=MC\\^2, wherein E represents energy (measured in Joules), M represents mass (measured in kilograms), and C represents the speed of light (measured approximately as 300000000 meters per second), per [Albert Einstein](https://en.wikipedia.org/wiki/Albert_Einstein) et al. Essentially, the formula means that mass and energy are equivalent.\n\nIn a file called `einstein.py`, implement a program in Python that prompts the user for mass as an integer (in kilograms) and then outputs the equivalent number of Joules as an integer. Assume that the user will input an integer.\n\n```{{python}}\ndef main(): #Get user input \n  user_input = input(\"Mass:\")\n\n#Convert input to integer\n  user_input = int(user_input)\n\n#Multiple Input(mass) by C\\^2 & print the result (E)\n  print(user_input * 90000000000000000)\n\nmain()\n```\n\n# [**Tip Calculator**](https://cs50.harvard.edu/python/2022/psets/0/tip/#tip-calculator)\n\n> And now for my Wizard tip calculator.\n>\n> --- Morty Seinfeld\n\nIn the United States, it's customary to leave a tip for your server after dining in a restaurant, typically an amount equal to 15% or more of your meal's cost. Not to worry, though, we've written a tip calculator for you, below!\n\n```{{python}}\ndef main():\n    dollars = dollars_to_float(input(\"How much was the meal? \"))\n    percent = percent_to_float(input(\"What percentage would you like to tip? \"))\n    tip = dollars * percent\n    print(f\"Leave ${tip:.2f}\")\n\n\ndef dollars_to_float(d):\n    # TODO\n\n\ndef percent_to_float(p):\n    # TODO\n\n\nmain()\n```\n\nWell, we've written *most* of a tip calculator for you. Unfortunately, we didn't have time to implement two functions:\n\n-   `dollars_to_float`, which should accept a `str` as input (formatted as `$##.##`, wherein each `#` is a decimal digit), remove the leading `$`, and return the amount as a `float`. For instance, given `$50.00` as input, it should return `50.0`.\n\n-   `percent_to_float`, which should accept a `str` as input (formatted as `##%`, wherein each `#` is a decimal digit), remove the trailing `%`, and return the percentage as a `float`. For instance, given `15%` as input, it should return `0.15`.\n\nAssume that the user will input values in the expected formats.\n\n```{{python}}\ndef main():\n    #Given code\n    dollars = dollars_to_float(input(\"How much was the meal? \"))\n    percent = percent_to_float(input(\"What percentage would you like to tip? \"))\n    tip = dollars * percent\n    print(f\"leave ${tip:.2f}\")\n\ndef dollars_to_float(d):\n    #Remove dollar sign\n    d = d.removeprefix(\"$\")\n    #Convert to float value & return\n    d = float(d)\n    return(d)\n\ndef percent_to_float(p):\n    #Remove Percent sign\n    p = p.removesuffix(\"%\")\n    #Convert to float & return\n    p = float(p)/100\n    return(p)\n\nmain()\n```\n\n# [**Playback Speed**](https://cs50.harvard.edu/python/2022/psets/0/playback/#playback-speed)\n\nSome people have a habit of lecturing speaking rather quickly, and it'd be nice to slow them down, a la YouTube's 0.75 playback speed, or even by having them pause between words.\n\nIn a file called `playback.py`, implement a program in Python that prompts the user for input and then outputs that same input, replacing each space with `...` (i.e., three periods).\n\n```{{python}}\ndef main():\n    #Get user input\n    user_input = input(\"What sentence would you like to slow down? \")\n\n    #Replace spaces with ellipses\n    user_input = user_input.replace(\" \", \"...\")\n\n    #Print user input with Ellipses to slow down sentence\n    print(user_input)\n\n\n\nmain()\n```\n\n# [**Indoor Voice**](https://cs50.harvard.edu/python/2022/psets/0/indoor/#indoor-voice)\n\nWRITING IN ALL CAPS IS LIKE YELLING.\n\nBest to use your \"indoor voice\" sometimes, writing entirely in lowercase.\n\nIn a file called `indoor.py`, implement a program in Python that prompts the user for input and then outputs that same input in lowercase. Punctuation and whitespace should be outputted unchanged. You're welcome, but not required, to prompt the user explicitly, as by passing a `str` of your own as an argument to `input`.\n\n``` {{python}}\ndef main():\n    #Get user input & Convert to lowercase\n    user_input = input(\"What would you like to say with an indoor voice? \").lower()\n\n    #Print user input\n    print(user_input)\n\n\nmain()\n```\n\n# [**Making Faces**](https://cs50.harvard.edu/python/2022/psets/0/faces/#making-faces)\n\nBefore there were emoji, there were [emoticons](https://en.wikipedia.org/wiki/List_of_emoticons), whereby text like `:)` was a happy face and text like `:(` was a sad face. Nowadays, programs tend to convert emoticons to emoji automatically!\n\nIn a file called `faces.py`, implement a function called `convert` that accepts a `str` as input and returns that same input with any `:)` converted to ![🙂](https://twemoji.maxcdn.com/v/14.0.2/72x72/1f642.png){alt=\"🙂\"} (otherwise known as a [slightly smiling face](https://emojipedia.org/slightly-smiling-face/)) and any `:(` converted to ![🙁](https://twemoji.maxcdn.com/v/14.0.2/72x72/1f641.png){alt=\"🙁\"} (otherwise known as a [slightly frowning face](https://emojipedia.org/slightly-frowning-face/)). All other text should be returned unchanged.\n\nThen, in that same file, implement a function called `main` that prompts the user for input, calls `convert` on that input, and prints the result. You\\'re welcome, but not required, to prompt the user explicitly, as by passing a `str` of your own as an argument to `input`. Be sure to call `main` at the bottom of your file.\n\n```{{python}}\ndef main():\n    #Get user input\n    user_input = input(\"Please input the string for conversion: \")\n\n    #Call Convert to change emoticons to emoji\n    user_input = convert(user_input)\n\n    #Print back to user\n    print(user_input)\n\n\n\ndef convert(sentence):\n    #Convert any happy faces to emoji\n    sentence = sentence.replace(\":)\", \"\\U0001F642\")\n\n    #Convert any sad faces to emoji\n    sentence = sentence.replace(\":(\", \"\\U0001F641\")\n\n    #Return original sentence as output of function\n    return(sentence)\n\nmain()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":{"light":"cosmo","dark":"darkly"},"title-block-banner":true,"title":"CS50 Lesson 1","author":"Ryan curtis","date":"2023-01-07","categories":["CS50","code","analysis"],"image":"cs50.png","jupyter":"python3"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}