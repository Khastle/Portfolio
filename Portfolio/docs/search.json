[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ryan Curtis",
    "section": "",
    "text": "I am the Community Court coordinator/statistician for Whitman County District Court. While my interest in Stats and data analysis began during my undergraduate education, my professional career in Data began in the courts.\nWhile my initial journey into data was done primarily through Excel, I have since learned to utilize a number of other tools for data exploration and visualization including, Python, R and some cloud BI tools to pull data from the vase database of the court which consists of tens of thousands of cases from all the way back in the 90’s."
  },
  {
    "objectID": "posts/CS50 Lesson 1 Code/index.html",
    "href": "posts/CS50 Lesson 1 Code/index.html",
    "title": "CS50 Lesson 1",
    "section": "",
    "text": "I thought it would be fun to track all of my progress learning python, even the VERY humble beginnings. Any of the posts with the CS50 tag are simply copy/pastes of my code from lessons, along with a copy/paste of what the assignment actually wanted me to do for context. As many of these functions rely on user_input, I took the liberty of adding the code simply as text rather than exectuable code as otherwise the page would not work as it would try to get inputs which cannot be given.\n\nEinstein\nEven if you haven’t studied physics (recently or ever!), you might have heard that E=MC^2, wherein E represents energy (measured in Joules), M represents mass (measured in kilograms), and C represents the speed of light (measured approximately as 300000000 meters per second), per Albert Einstein et al. Essentially, the formula means that mass and energy are equivalent.\nIn a file called einstein.py, implement a program in Python that prompts the user for mass as an integer (in kilograms) and then outputs the equivalent number of Joules as an integer. Assume that the user will input an integer.\n```{python}\ndef main(): #Get user input \n  user_input = input(\"Mass:\")\n\n#Convert input to integer\n  user_input = int(user_input)\n\n#Multiple Input(mass) by C\\^2 & print the result (E)\n  print(user_input * 90000000000000000)\n\nmain()\n```\n\n\nTip Calculator\n\nAnd now for my Wizard tip calculator.\n— Morty Seinfeld\n\nIn the United States, it’s customary to leave a tip for your server after dining in a restaurant, typically an amount equal to 15% or more of your meal’s cost. Not to worry, though, we’ve written a tip calculator for you, below!\n```{python}\ndef main():\n    dollars = dollars_to_float(input(\"How much was the meal? \"))\n    percent = percent_to_float(input(\"What percentage would you like to tip? \"))\n    tip = dollars * percent\n    print(f\"Leave ${tip:.2f}\")\n\n\ndef dollars_to_float(d):\n    # TODO\n\n\ndef percent_to_float(p):\n    # TODO\n\n\nmain()\n```\nWell, we’ve written most of a tip calculator for you. Unfortunately, we didn’t have time to implement two functions:\n\ndollars_to_float, which should accept a str as input (formatted as $##.##, wherein each # is a decimal digit), remove the leading $, and return the amount as a float. For instance, given $50.00 as input, it should return 50.0.\npercent_to_float, which should accept a str as input (formatted as ##%, wherein each # is a decimal digit), remove the trailing %, and return the percentage as a float. For instance, given 15% as input, it should return 0.15.\n\nAssume that the user will input values in the expected formats.\n```{python}\ndef main():\n    #Given code\n    dollars = dollars_to_float(input(\"How much was the meal? \"))\n    percent = percent_to_float(input(\"What percentage would you like to tip? \"))\n    tip = dollars * percent\n    print(f\"leave ${tip:.2f}\")\n\ndef dollars_to_float(d):\n    #Remove dollar sign\n    d = d.removeprefix(\"$\")\n    #Convert to float value & return\n    d = float(d)\n    return(d)\n\ndef percent_to_float(p):\n    #Remove Percent sign\n    p = p.removesuffix(\"%\")\n    #Convert to float & return\n    p = float(p)/100\n    return(p)\n\nmain()\n```\n\n\nPlayback Speed\nSome people have a habit of lecturing speaking rather quickly, and it’d be nice to slow them down, a la YouTube’s 0.75 playback speed, or even by having them pause between words.\nIn a file called playback.py, implement a program in Python that prompts the user for input and then outputs that same input, replacing each space with ... (i.e., three periods).\n```{python}\ndef main():\n    #Get user input\n    user_input = input(\"What sentence would you like to slow down? \")\n\n    #Replace spaces with ellipses\n    user_input = user_input.replace(\" \", \"...\")\n\n    #Print user input with Ellipses to slow down sentence\n    print(user_input)\n\n\n\nmain()\n```\n\n\nIndoor Voice\nWRITING IN ALL CAPS IS LIKE YELLING.\nBest to use your “indoor voice” sometimes, writing entirely in lowercase.\nIn a file called indoor.py, implement a program in Python that prompts the user for input and then outputs that same input in lowercase. Punctuation and whitespace should be outputted unchanged. You’re welcome, but not required, to prompt the user explicitly, as by passing a str of your own as an argument to input.\n```{python}\ndef main():\n    #Get user input & Convert to lowercase\n    user_input = input(\"What would you like to say with an indoor voice? \").lower()\n\n    #Print user input\n    print(user_input)\n\n\nmain()\n```\n\n\nMaking Faces\nBefore there were emoji, there were emoticons, whereby text like :) was a happy face and text like :( was a sad face. Nowadays, programs tend to convert emoticons to emoji automatically!\nIn a file called faces.py, implement a function called convert that accepts a str as input and returns that same input with any :) converted to  (otherwise known as a slightly smiling face) and any :( converted to  (otherwise known as a slightly frowning face). All other text should be returned unchanged.\nThen, in that same file, implement a function called main that prompts the user for input, calls convert on that input, and prints the result. You're welcome, but not required, to prompt the user explicitly, as by passing a str of your own as an argument to input. Be sure to call main at the bottom of your file.\n```{python}\ndef main():\n    #Get user input\n    user_input = input(\"Please input the string for conversion: \")\n\n    #Call Convert to change emoticons to emoji\n    user_input = convert(user_input)\n\n    #Print back to user\n    print(user_input)\n\n\n\ndef convert(sentence):\n    #Convert any happy faces to emoji\n    sentence = sentence.replace(\":)\", \"\\U0001F642\")\n\n    #Convert any sad faces to emoji\n    sentence = sentence.replace(\":(\", \"\\U0001F641\")\n\n    #Return original sentence as output of function\n    return(sentence)\n\nmain()\n```"
  },
  {
    "objectID": "posts/fifa_spider_plots/index.html",
    "href": "posts/fifa_spider_plots/index.html",
    "title": "Fifa Radar Plots",
    "section": "",
    "text": "For this assignment, I decided to challenge myself a little bit by not using a dataset that I found on Kaggle. In order to find a new data set, I did the reasonable thing and began my frantic google searches. What I found was that there is a plethora of well formatted data out there, most of it is just online as opposed to a nice and easy excel format. With this project I hope to familarize myself with the In’s and Out’s of webscraping and maybe clean a dataset and sprinkle in some visualizations just for the fun of it.\n\n\nFor this assignment, the first order of buisiness is to decide what to look at. I’m a big soccer fan so I figured I would take a look at something in relation to that. It would be interesting to create some radar plots of players as that is a visualization I have never used before so we will move forward with that in mind as our end goal.\nAfter some research, I have decided to use the wonderful resource, &lt;sofifa.com&gt;. This site is one big table that contains the fifa stats for any football player who is currently in the fifa system, which is alot. The first thing we will do, as always, is we are going to prepare our standard visualization and cleaning packages for usage.\n\nimport re\nimport json\nimport requests\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\nNow, we are going to import a few more with the goal of Web-Scraping\n\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\n\nNow we want to familiarize ourselves with our website a little bit. Taking a look at the base homepage, we can see that every player has some basic information on display. We can see their Names, Age, Overall, potential, as well as their team and wage they make. Now when we click on an individual player, it gives us a much more thorough breakdown of their individual statistics. We can even see a radar plot, which is exactly what we will be making, however we will be making some adjustments and tweaks to it.\nLooking around the site and some of the pages that are on here To begin, I am intested solely in players from the premier league. I need to specify this as my url so I will take this url as my base URL we will use to get general player stats\nHowever, in accessing and web-scraping some websites, they have anti-botting software that can deny our request. Running a normal request.get() operation will result in our request being denied. To get around this we will be introducing some extra code as compared to a standard web scrape request.\n\nbase_url = \"https://sofifa.com/players?type=all&lg%5B0%5D=13&offset=0\"\n\nreq = requests.Session()\npage = req.get(base_url, headers = {\n  \"User-Agent\": \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.3; Win64; x64)\"\n})\nsoup = BeautifulSoup(page.content, \"html.parser\")\n\nThe main things to note are the usage of the request.session() function, which persists cookies across requests, and the header in req.get(), which essentially feeds the site some information to trick it into thinking it is a human making the request as opposed to a program.\n\n\n\nNow that we can actually scrape and get our data, we want to look at our data structure to determine where in it our player data lies. In this case, it stored in a structure called tbody, so we want python to grab that class and give us all the information that it holds.\n\nplayer_data = soup.tbody\n\nI’ll save you the trouble of looking at the raw soup text, but looking thrugh it we can see it contains all the stats for each player that we could see on the main page, it’s just all jumbled up. The next step now is to begin sorting the data into a dictionary that is easily navigable and interpretable.\nBy looking through this, we can see that each player’s stats start and end with a new class type, tr. We can use this information to tell python exactly when to start/stop looking at a player and move onto the next. We can automate this for every player on this list with some loop action\n\nplayer_list=[] #Create empty list to store all data for each player as a seperate entry in list\nplayer_dict={ #Create empty dictionary with all the stats to capture, will later be converted to a Pandas dataframe\n  \"last_name\": [],\n  \"position\": [],\n  \"age\": [],\n  \"overall\": [],\n  \"potential\": [],\n  \"team\": [],\n  \"contract\": [],\n  \"value\": [],\n  \"wage\": [],\n  \"stats\": [],\n  \"id\": []\n} \n\nplayer_list = player_data.find_all(\"tr\") #Seperate each player/stats into a different entry in a list\nfor player in player_list:\n  positions = [] #Create blank list to store positions in case there are multiple positions\n  i = 0\n  \n  player_dict[\"last_name\"].append(player.find(\"div\", class_=\"ellipsis\").get_text())\n  \n  #Some players have multiple positions, join all positions into a list, then get_text and merge list, append to dict\n  positions = player.find_all(class_=re.compile(\"pos\")) #Search through classes to find ones that include \"pos\" \n  while i != len(positions):\n    positions[i] = positions[i].get_text(strip=True)\n    i = i + 1\n  \n  player_dict[\"position\"].append(\" \".join(positions))\n  player_dict[\"age\"].append(player.find(\"td\", class_=\"col col-ae\").get_text())\n  player_dict[\"overall\"].append(int(player.find(\"td\", class_=\"col col-oa col-sort\").get_text()))\n  player_dict[\"potential\"].append(player.find(\"td\", class_=\"col col-pt\").get_text())\n  player_dict[\"team\"].append(player.find(href=re.compile(\"/team/\")).get_text())\n  player_dict[\"contract\"].append(player.find(\"div\", class_=\"sub\").get_text())\n  player_dict[\"value\"].append(player.find(\"td\", class_=\"col col-vl\").get_text())\n  player_dict[\"wage\"].append(player.find(\"td\", class_=\"col col-wg\").get_text())\n  player_dict[\"stats\"].append(player.find(\"span\", class_=\"bp3-tag p\").get_text()) #Not sure what this is for\n  player_dict[\"id\"].append(player.img[\"id\"])\n\nNow that was quite a bit of code. Essentially all we are doing here is creating a list where each entry is a player we have scraped data for, then iterating through the list and saving the data for each player in a dictionary. This dictionary will then turned in to a Pandas dataframe.\n\nplayers_dataframe=pd.DataFrame(player_dict)\nprint(players_dataframe.head(5))\n\n      last_name position age  overall potential               team  \\\n0  K. De Bruyne   CM CAM  31       91        91    Manchester City   \n1    E. Haaland       ST  21       90        94    Manchester City   \n2      M. Salah       RW  30       89        89          Liverpool   \n3       Alisson       GK  29       89        90          Liverpool   \n4      Casemiro      CDM  30       89        89  Manchester United   \n\n        contract    value   wage stats      id  \n0  \\n2015 ~ 2025  €107.5M  €350K  2299  192985  \n1  \\n2022 ~ 2027  €176.5M  €240K  2144  239085  \n2  \\n2017 ~ 2025   €99.5M  €260K  2208  209331  \n3  \\n2018 ~ 2027     €79M  €190K  1437  212831  \n4  \\n2022 ~ 2026     €86M  €240K  2251  200145  \n\n\nThis looks pretty good! There are obviously some things that are slightly wrong with our data frame so lets move onto some cleaning!\n\n\n\nNow that we have (some) of our data into a nice looking data frame, let’s work on cleaning it up a little bit, not just for the aesthetics, but also the practicality of having a nice, clean data frame to work with.\n\n#Code to clean up the names\nplayer_name = players_dataframe.last_name #Create series to iterate through\nfor name in player_name:\n  name_split = \"\"\n  if name.find(\".\") != -1: #Only returns -1 if unable to find \".\" character\n    name_split = name.split(\". \", 1)\n    players_dataframe[\"last_name\"] = players_dataframe[\"last_name\"].replace(name, name_split[1]) #Replace original dataframe with updated last name\n  else:\n    pass\n  \n#Code to clean up positions\nplayers_dataframe[[\"position_1\", \"position_2\", \"position_3\"]] = players_dataframe.position.str.split(\" \", expand = True)\nplayers_dataframe = players_dataframe.drop(columns=\"position\")\n\n#Code to clean up contract column; We don't (yet) have a way to determine contract specifics if player is on loan, for now just assign them a value showing they are loan \ncontract_length = players_dataframe.contract\nfor contract in contract_length:\n  fixed_contract = contract.removeprefix(\"\\n\")\n  players_dataframe[\"contract\"] = players_dataframe[\"contract\"].replace(contract, fixed_contract)\n  players_dataframe[[\"contract_start\", \"contract_end\"]] = players_dataframe.contract.str.split(\" ~ \", expand = True)\n  \nplayers_dataframe = players_dataframe.drop(columns=\"contract\")\n\n#Strip currency symbols & suffix from wage and value columns\nplayers_dataframe[\"value\"] = players_dataframe.value.str.removeprefix(\"€\")\nplayers_dataframe[\"wage\"] = players_dataframe.wage.str.removeprefix(\"€\")\n#Remove suffix from value, convert to total amounts \nfor value in players_dataframe.value:\n  replace_value = 0\n  if value.find(\"M\") != -1:\n    replace_value = value.removesuffix(\"M\")\n    replace_value = int(float(replace_value)) * 1000000\n    players_dataframe[\"value\"] = players_dataframe[\"value\"].replace(value, replace_value)\n  elif value.find(\"K\") != -1:\n    replace_value = value.removesuffix(\"K\")\n    replace_value = int(float(replace_value)) * 1000\n    players_dataframe[\"value\"] = players_dataframe[\"value\"].replace(value, replace_value)\n  \n#Same thing but with wages\nfor wage in players_dataframe.wage:\n  replace_wage = 0\n  if wage.find(\"M\") != -1:\n    replace_wage = wage.removesuffix(\"M\")\n    replace_wage = int(float(replace_wage)) * 1000000\n    players_dataframe[\"wage\"] = players_dataframe[\"wage\"].replace(wage, replace_wage)\n  elif wage.find(\"K\") != -1:\n    replace_wage = wage.removesuffix(\"K\")\n    replace_wage = int(float(replace_wage)) * 1000\n    players_dataframe[\"wage\"] = players_dataframe[\"wage\"].replace(wage, replace_wage)\n\nprint(players_dataframe.head(5))\n\n   last_name age  overall potential               team      value    wage  \\\n0  De Bruyne  31       91        91    Manchester City  107000000  350000   \n1    Haaland  21       90        94    Manchester City  176000000  240000   \n2      Salah  30       89        89          Liverpool   99000000  260000   \n3    Alisson  29       89        90          Liverpool   79000000  190000   \n4   Casemiro  30       89        89  Manchester United   86000000  240000   \n\n  stats      id position_1 position_2 position_3 contract_start contract_end  \n0  2299  192985         CM        CAM       None           2015         2025  \n1  2144  239085         ST       None       None           2022         2027  \n2  2208  209331         RW       None       None           2017         2025  \n3  1437  212831         GK       None       None           2018         2027  \n4  2251  200145        CDM       None       None           2022         2026  \n\n\nAlright. So now we have gotten some preliminary information on each player. But the real analysis of their playstyle is really only seen in the semantics. We want to get into the nitty gritty for each of these players and see what picture their stats and abilities paint of their playstyle. Let’s see if we can can use that unique identifier we saved earlier to access all data for each player.\n\n#Rescrape each player's separate stat page\nfifa_stats = { #Create new dictionary to store the fifa values of players different stats, later merge with original df\n  \"crossing\": [],\n  \"finishing\": [],\n  \"heading_accuracy\": [],\n  \"short_passing\": [],\n  \"volleys\": [],\n  \"dribbling\": [],\n  \"curve\": [],\n  \"fk_accuracy\": [],\n  \"long_passing\": [],\n  \"ball_control\": [],\n  \"acceleration\": [],\n  \"sprint_speed\": [],\n  \"agility\": [],\n  \"reactions\": [],\n  \"balance\": [],\n  \"shot_power\": [],\n  \"jumping\": [],\n  \"stamina\": [],\n  \"strength\": [],\n  \"long_shots\": [],\n  \"aggression\": [],\n  \"interceptions\": [],\n  \"positioning\": [],\n  \"vision\": [],\n  \"penalties\": [],\n  \"composure\": [],\n  \"defensive_awareness\": [],\n  \"standing_tackle\": [],\n  \"sliding_tackle\": [],\n  \"gk_diving\": [],\n  \"gk_handling\": [],\n  \"gk_kicking\": [],\n  \"gk_positioning\": [],\n  \"gk_reflexes\": []\n}\nfor player_id in players_dataframe.id:\n  a = 0\n  #Web-Scrape to get fifa stats from webpage\n  base_url = \"https://sofifa.com/player/\" + player_id\n  req = requests.Session()\n  page = req.get(base_url, headers = {\n    \"User-Agent\": \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.3; Win64; x64)\"\n  })\n  soup = BeautifulSoup(page.content, \"html.parser\")\n  \n  #After successful web scrape, grab all stats from page, scrape away ones we don't need, append values to fifa dict\n  player_stats = soup.find_all(class_=re.compile(\"bp3-tag p p-\"))\n  #print(len(player_stats))\n  if len(player_stats) == 66:\n    del player_stats[0:32] #Remove initial entries in list as we only care about the player stats\n  else:\n    del player_stats[0:31] #Some players have only 65 calls bp3-tag objects, take care of those instances as well\n  for stat in fifa_stats:\n    fifa_stats[stat].append(int(player_stats[a].get_text()))\n    a = a + 1\n  fifa_stats_df=pd.DataFrame(fifa_stats)\n\n#Now we can join together these two dataframes\nplayer_stats_df = pd.concat([players_dataframe, fifa_stats_df], axis=1, join=\"inner\")\nprint(player_stats_df.head(5))\n\n   last_name age  overall potential               team      value    wage  \\\n0  De Bruyne  31       91        91    Manchester City  107000000  350000   \n1    Haaland  21       90        94    Manchester City  176000000  240000   \n2      Salah  30       89        89          Liverpool   99000000  260000   \n3    Alisson  29       89        90          Liverpool   79000000  190000   \n4   Casemiro  30       89        89  Manchester United   86000000  240000   \n\n  stats      id position_1  ... penalties composure defensive_awareness  \\\n0  2299  192985         CM  ...        83        88                  66   \n1  2144  239085         ST  ...        84        87                  41   \n2  2208  209331         RW  ...        81        90                  38   \n3  1437  212831         GK  ...        23        66                  15   \n4  2251  200145        CDM  ...        66        85                  90   \n\n  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  \\\n0              66              53         15           13           5   \n1              53              29          7           14          13   \n2              43              41         14           14           9   \n3              19              16         86           85          85   \n4              89              88         13           14          16   \n\n   gk_positioning  gk_reflexes  \n0              10           13  \n1              11            7  \n2              11           14  \n3              90           89  \n4              12           12  \n\n[5 rows x 48 columns]\n\n\nLooking good! Now we have a nicely sized dataframe that stores all data and stats of our webscraped players. Since this is mostly cleaned and ready for usage, we can now move onto creating our radar plots!\n\n\n\nJust for the fun of it we’ll make a correlation matrix to see what stats most heavily influence a player’s overall rating because I think that it would be interesting to see if this is simply an average of all statistics for players or if the overall is more dependent on certain stats.\n\n#Convert overall to int, add to player stats df, create correlation heatmap \ncorrmat = fifa_stats_df.join(players_dataframe[\"overall\"]).corr()\nsns.heatmap(corrmat, square=True)\n\n&lt;Axes: &gt;\n\n\n\n\n\nFor our next little project, we will be moving onto the spider plots.\nI liked the idea of grouping the players’ stats into categories, as a radar plot with as many points as we have columns would not be a great visualization. I decided to group the stats into different categories based on their function. Once we make those categories, we can then simply take the average of the datapoints in them and use that as one of values to plot on the Radar plot.\n\n#for usage later in dataframe\nnames = [\"attacking\", \"passing\", \"physicality\", \"pace\", \"dribbling\", \"mentality\", \"defending\", \"goalkeeping\"]\naverage = [0, 0, 0, 0, 0, 0, 0, 0]\n\n#create loop to make categories for each player\nfor index, row in player_stats_df.iterrows():\n  \n  #First assign values to a list, then map them as INT, then get mean. Repeat for every point of radar plot\n  attacking_col = [row[\"finishing\"], row[\"heading_accuracy\"], row[\"volleys\"], row[\"shot_power\"], row[\"long_shots\"]]\n  attacking_col = list(map(int, attacking_col))\n  average[0] = np.mean(attacking_col)\n  \n  passing_col = [row[\"short_passing\"], row[\"long_passing\"], row[\"crossing\"], row[\"fk_accuracy\"]]\n  passing_col = list(map(int, passing_col))\n  average[1] = np.mean(passing_col)\n  \n  physicality_col = [row[\"reactions\"], row[\"balance\"], row[\"strength\"], row[\"jumping\"]]\n  physicality_col = list(map(int, physicality_col))\n  average[2] = np.mean(physicality_col)\n  \n  pace_col = [row[\"acceleration\"], row[\"sprint_speed\"], row[\"agility\"]]\n  pace_col = list(map(int, pace_col))\n  average[3] = np.mean(pace_col)\n  \n  dribbling_col = [row[\"dribbling\"], row[\"ball_control\"]]\n  dribbling_col = list(map(int, dribbling_col))\n  average[4] = np.mean(dribbling_col)\n  \n  mentality_col = [row[\"aggression\"], row[\"positioning\"], row[\"vision\"], row[\"composure\"]]\n  mentality_col = list(map(int, mentality_col))\n  average[5] = np.mean(mentality_col)\n  \n  defending_col = [row[\"interceptions\"], row[\"defensive_awareness\"], row[\"standing_tackle\"], row[\"sliding_tackle\"]]\n  defending_col = list(map(int, defending_col))\n  average[6] = np.mean(defending_col)\n  \n  goalkeeping_col = [row[\"gk_diving\"], row[\"gk_handling\"], row[\"gk_kicking\"], row[\"gk_positioning\"], row[\"gk_reflexes\"]]\n  goalkeeping_col = list(map(int, goalkeeping_col))\n  average[7] = np.mean(goalkeeping_col)\n  \n  #Create dataframe to make radar plot\n  data_dict = {\"names\": names, \"average\": average} \n  df = pd.DataFrame(data_dict)\n  \n  #Create and show graphs for every player\n  fig = px.line_polar(df, r=\"average\", theta =\"names\", line_close=True)\n  fig.update_traces(fill=\"toself\")\n  print(\"Player:\", row[\"last_name\"],\",\", \"Overall:\", row[\"overall\"],\",\",  \"Position:\", row[\"position_1\"])\n  fig.show()\n\nPlayer: De Bruyne , Overall: 91 , Position: CM\nPlayer: Haaland , Overall: 90 , Position: ST\nPlayer: Salah , Overall: 89 , Position: RW\nPlayer: Alisson , Overall: 89 , Position: GK\nPlayer: Casemiro , Overall: 89 , Position: CDM\nPlayer: Kane , Overall: 89 , Position: ST\nPlayer: van Dijk , Overall: 88 , Position: CB\nPlayer: Ederson , Overall: 88 , Position: GK\nPlayer: Bernardo Silva , Overall: 88 , Position: CM\nPlayer: Rúben Dias , Overall: 88 , Position: CB\nPlayer: Son , Overall: 88 , Position: LW\nPlayer: Kanté , Overall: 87 , Position: CDM\nPlayer: Rodri , Overall: 87 , Position: CDM\nPlayer: De Gea , Overall: 87 , Position: GK\nPlayer: Bruno Fernandes , Overall: 87 , Position: CAM\nPlayer: Ødegaard , Overall: 86 , Position: CAM\nPlayer: Robertson , Overall: 86 , Position: LB\nPlayer: Laporte , Overall: 86 , Position: CB\nPlayer: Navas , Overall: 86 , Position: GK\nPlayer: Partey , Overall: 85 , Position: CDM\nPlayer: Saka , Overall: 85 , Position: RW\nPlayer: Martínez , Overall: 85 , Position: GK\nPlayer: Thiago Silva , Overall: 85 , Position: CB\nPlayer: Sterling , Overall: 85 , Position: LW\nPlayer: Thiago , Overall: 85 , Position: CM\nPlayer: Fabinho , Overall: 85 , Position: CDM\nPlayer: Alexander-Arnold , Overall: 85 , Position: RB\nPlayer: Gündoğan , Overall: 85 , Position: CM\nPlayer: Mahrez , Overall: 85 , Position: RW\nPlayer: Varane , Overall: 85 , Position: CB\nPlayer: Rashford , Overall: 85 , Position: LW\nPlayer: Jorginho , Overall: 84 , Position: CM\nPlayer: Gabriel Jesus , Overall: 84 , Position: ST\nPlayer: Koulibaly , Overall: 84 , Position: CB\nPlayer: James , Overall: 84 , Position: RWB\nPlayer: Diogo Jota , Overall: 84 , Position: CF\nPlayer: Díaz , Overall: 84 , Position: LW\nPlayer: Walker , Overall: 84 , Position: RB\nPlayer: Grealish , Overall: 84 , Position: LW\nPlayer: Foden , Overall: 84 , Position: LW\nPlayer: Trippier , Overall: 84 , Position: RB\nPlayer: Bruno Guimarães , Overall: 84 , Position: CM\nPlayer: Lloris , Overall: 84 , Position: GK\nPlayer: Højbjerg , Overall: 84 , Position: CDM\nPlayer: Rice , Overall: 84 , Position: CDM\nPlayer: Maddison , Overall: 84 , Position: RM\nPlayer: Ramsdale , Overall: 83 , Position: GK\nPlayer: Saliba , Overall: 83 , Position: CB\nPlayer: Mendy , Overall: 83 , Position: GK\nPlayer: Havertz , Overall: 83 , Position: CAM\nPlayer: João Félix , Overall: 83 , Position: CF\nPlayer: Roberto Firmino , Overall: 83 , Position: CF\nPlayer: Gakpo , Overall: 83 , Position: CF\nPlayer: Stones , Overall: 83 , Position: CB\nPlayer: Eriksen , Overall: 83 , Position: CM\nPlayer: Martínez , Overall: 83 , Position: CB\nPlayer: Pope , Overall: 83 , Position: GK\nPlayer: Botman , Overall: 83 , Position: CB\nPlayer: Romero , Overall: 83 , Position: CB\nPlayer: Tielemans , Overall: 83 , Position: CM\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\nAnd there we go! They’re not the most informative or beatiful visualizations, but they were largely just for practice in webscraping anyways. This was an excellent project that familiarized myself with the ins and outs of web scraping."
  },
  {
    "objectID": "posts/fifa_spider_plots/index.html#the-dataset",
    "href": "posts/fifa_spider_plots/index.html#the-dataset",
    "title": "Fifa Radar Plots",
    "section": "",
    "text": "For this assignment, the first order of buisiness is to decide what to look at. I’m a big soccer fan so I figured I would take a look at something in relation to that. It would be interesting to create some radar plots of players as that is a visualization I have never used before so we will move forward with that in mind as our end goal.\nAfter some research, I have decided to use the wonderful resource, &lt;sofifa.com&gt;. This site is one big table that contains the fifa stats for any football player who is currently in the fifa system, which is alot. The first thing we will do, as always, is we are going to prepare our standard visualization and cleaning packages for usage.\n\nimport re\nimport json\nimport requests\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings(\"ignore\")"
  },
  {
    "objectID": "posts/fifa_spider_plots/index.html#web-scraping",
    "href": "posts/fifa_spider_plots/index.html#web-scraping",
    "title": "Fifa Radar Plots",
    "section": "",
    "text": "Now, we are going to import a few more with the goal of Web-Scraping\n\nimport requests\nimport json\nfrom bs4 import BeautifulSoup\n\nNow we want to familiarize ourselves with our website a little bit. Taking a look at the base homepage, we can see that every player has some basic information on display. We can see their Names, Age, Overall, potential, as well as their team and wage they make. Now when we click on an individual player, it gives us a much more thorough breakdown of their individual statistics. We can even see a radar plot, which is exactly what we will be making, however we will be making some adjustments and tweaks to it.\nLooking around the site and some of the pages that are on here To begin, I am intested solely in players from the premier league. I need to specify this as my url so I will take this url as my base URL we will use to get general player stats\nHowever, in accessing and web-scraping some websites, they have anti-botting software that can deny our request. Running a normal request.get() operation will result in our request being denied. To get around this we will be introducing some extra code as compared to a standard web scrape request.\n\nbase_url = \"https://sofifa.com/players?type=all&lg%5B0%5D=13&offset=0\"\n\nreq = requests.Session()\npage = req.get(base_url, headers = {\n  \"User-Agent\": \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.3; Win64; x64)\"\n})\nsoup = BeautifulSoup(page.content, \"html.parser\")\n\nThe main things to note are the usage of the request.session() function, which persists cookies across requests, and the header in req.get(), which essentially feeds the site some information to trick it into thinking it is a human making the request as opposed to a program."
  },
  {
    "objectID": "posts/fifa_spider_plots/index.html#data-structure-navigation",
    "href": "posts/fifa_spider_plots/index.html#data-structure-navigation",
    "title": "Fifa Radar Plots",
    "section": "",
    "text": "Now that we can actually scrape and get our data, we want to look at our data structure to determine where in it our player data lies. In this case, it stored in a structure called tbody, so we want python to grab that class and give us all the information that it holds.\n\nplayer_data = soup.tbody\n\nI’ll save you the trouble of looking at the raw soup text, but looking thrugh it we can see it contains all the stats for each player that we could see on the main page, it’s just all jumbled up. The next step now is to begin sorting the data into a dictionary that is easily navigable and interpretable.\nBy looking through this, we can see that each player’s stats start and end with a new class type, tr. We can use this information to tell python exactly when to start/stop looking at a player and move onto the next. We can automate this for every player on this list with some loop action\n\nplayer_list=[] #Create empty list to store all data for each player as a seperate entry in list\nplayer_dict={ #Create empty dictionary with all the stats to capture, will later be converted to a Pandas dataframe\n  \"last_name\": [],\n  \"position\": [],\n  \"age\": [],\n  \"overall\": [],\n  \"potential\": [],\n  \"team\": [],\n  \"contract\": [],\n  \"value\": [],\n  \"wage\": [],\n  \"stats\": [],\n  \"id\": []\n} \n\nplayer_list = player_data.find_all(\"tr\") #Seperate each player/stats into a different entry in a list\nfor player in player_list:\n  positions = [] #Create blank list to store positions in case there are multiple positions\n  i = 0\n  \n  player_dict[\"last_name\"].append(player.find(\"div\", class_=\"ellipsis\").get_text())\n  \n  #Some players have multiple positions, join all positions into a list, then get_text and merge list, append to dict\n  positions = player.find_all(class_=re.compile(\"pos\")) #Search through classes to find ones that include \"pos\" \n  while i != len(positions):\n    positions[i] = positions[i].get_text(strip=True)\n    i = i + 1\n  \n  player_dict[\"position\"].append(\" \".join(positions))\n  player_dict[\"age\"].append(player.find(\"td\", class_=\"col col-ae\").get_text())\n  player_dict[\"overall\"].append(int(player.find(\"td\", class_=\"col col-oa col-sort\").get_text()))\n  player_dict[\"potential\"].append(player.find(\"td\", class_=\"col col-pt\").get_text())\n  player_dict[\"team\"].append(player.find(href=re.compile(\"/team/\")).get_text())\n  player_dict[\"contract\"].append(player.find(\"div\", class_=\"sub\").get_text())\n  player_dict[\"value\"].append(player.find(\"td\", class_=\"col col-vl\").get_text())\n  player_dict[\"wage\"].append(player.find(\"td\", class_=\"col col-wg\").get_text())\n  player_dict[\"stats\"].append(player.find(\"span\", class_=\"bp3-tag p\").get_text()) #Not sure what this is for\n  player_dict[\"id\"].append(player.img[\"id\"])\n\nNow that was quite a bit of code. Essentially all we are doing here is creating a list where each entry is a player we have scraped data for, then iterating through the list and saving the data for each player in a dictionary. This dictionary will then turned in to a Pandas dataframe.\n\nplayers_dataframe=pd.DataFrame(player_dict)\nprint(players_dataframe.head(5))\n\n      last_name position age  overall potential               team  \\\n0  K. De Bruyne   CM CAM  31       91        91    Manchester City   \n1    E. Haaland       ST  21       90        94    Manchester City   \n2      M. Salah       RW  30       89        89          Liverpool   \n3       Alisson       GK  29       89        90          Liverpool   \n4      Casemiro      CDM  30       89        89  Manchester United   \n\n        contract    value   wage stats      id  \n0  \\n2015 ~ 2025  €107.5M  €350K  2299  192985  \n1  \\n2022 ~ 2027  €176.5M  €240K  2144  239085  \n2  \\n2017 ~ 2025   €99.5M  €260K  2208  209331  \n3  \\n2018 ~ 2027     €79M  €190K  1437  212831  \n4  \\n2022 ~ 2026     €86M  €240K  2251  200145  \n\n\nThis looks pretty good! There are obviously some things that are slightly wrong with our data frame so lets move onto some cleaning!"
  },
  {
    "objectID": "posts/fifa_spider_plots/index.html#data-cleaning",
    "href": "posts/fifa_spider_plots/index.html#data-cleaning",
    "title": "Fifa Radar Plots",
    "section": "",
    "text": "Now that we have (some) of our data into a nice looking data frame, let’s work on cleaning it up a little bit, not just for the aesthetics, but also the practicality of having a nice, clean data frame to work with.\n\n#Code to clean up the names\nplayer_name = players_dataframe.last_name #Create series to iterate through\nfor name in player_name:\n  name_split = \"\"\n  if name.find(\".\") != -1: #Only returns -1 if unable to find \".\" character\n    name_split = name.split(\". \", 1)\n    players_dataframe[\"last_name\"] = players_dataframe[\"last_name\"].replace(name, name_split[1]) #Replace original dataframe with updated last name\n  else:\n    pass\n  \n#Code to clean up positions\nplayers_dataframe[[\"position_1\", \"position_2\", \"position_3\"]] = players_dataframe.position.str.split(\" \", expand = True)\nplayers_dataframe = players_dataframe.drop(columns=\"position\")\n\n#Code to clean up contract column; We don't (yet) have a way to determine contract specifics if player is on loan, for now just assign them a value showing they are loan \ncontract_length = players_dataframe.contract\nfor contract in contract_length:\n  fixed_contract = contract.removeprefix(\"\\n\")\n  players_dataframe[\"contract\"] = players_dataframe[\"contract\"].replace(contract, fixed_contract)\n  players_dataframe[[\"contract_start\", \"contract_end\"]] = players_dataframe.contract.str.split(\" ~ \", expand = True)\n  \nplayers_dataframe = players_dataframe.drop(columns=\"contract\")\n\n#Strip currency symbols & suffix from wage and value columns\nplayers_dataframe[\"value\"] = players_dataframe.value.str.removeprefix(\"€\")\nplayers_dataframe[\"wage\"] = players_dataframe.wage.str.removeprefix(\"€\")\n#Remove suffix from value, convert to total amounts \nfor value in players_dataframe.value:\n  replace_value = 0\n  if value.find(\"M\") != -1:\n    replace_value = value.removesuffix(\"M\")\n    replace_value = int(float(replace_value)) * 1000000\n    players_dataframe[\"value\"] = players_dataframe[\"value\"].replace(value, replace_value)\n  elif value.find(\"K\") != -1:\n    replace_value = value.removesuffix(\"K\")\n    replace_value = int(float(replace_value)) * 1000\n    players_dataframe[\"value\"] = players_dataframe[\"value\"].replace(value, replace_value)\n  \n#Same thing but with wages\nfor wage in players_dataframe.wage:\n  replace_wage = 0\n  if wage.find(\"M\") != -1:\n    replace_wage = wage.removesuffix(\"M\")\n    replace_wage = int(float(replace_wage)) * 1000000\n    players_dataframe[\"wage\"] = players_dataframe[\"wage\"].replace(wage, replace_wage)\n  elif wage.find(\"K\") != -1:\n    replace_wage = wage.removesuffix(\"K\")\n    replace_wage = int(float(replace_wage)) * 1000\n    players_dataframe[\"wage\"] = players_dataframe[\"wage\"].replace(wage, replace_wage)\n\nprint(players_dataframe.head(5))\n\n   last_name age  overall potential               team      value    wage  \\\n0  De Bruyne  31       91        91    Manchester City  107000000  350000   \n1    Haaland  21       90        94    Manchester City  176000000  240000   \n2      Salah  30       89        89          Liverpool   99000000  260000   \n3    Alisson  29       89        90          Liverpool   79000000  190000   \n4   Casemiro  30       89        89  Manchester United   86000000  240000   \n\n  stats      id position_1 position_2 position_3 contract_start contract_end  \n0  2299  192985         CM        CAM       None           2015         2025  \n1  2144  239085         ST       None       None           2022         2027  \n2  2208  209331         RW       None       None           2017         2025  \n3  1437  212831         GK       None       None           2018         2027  \n4  2251  200145        CDM       None       None           2022         2026  \n\n\nAlright. So now we have gotten some preliminary information on each player. But the real analysis of their playstyle is really only seen in the semantics. We want to get into the nitty gritty for each of these players and see what picture their stats and abilities paint of their playstyle. Let’s see if we can can use that unique identifier we saved earlier to access all data for each player.\n\n#Rescrape each player's separate stat page\nfifa_stats = { #Create new dictionary to store the fifa values of players different stats, later merge with original df\n  \"crossing\": [],\n  \"finishing\": [],\n  \"heading_accuracy\": [],\n  \"short_passing\": [],\n  \"volleys\": [],\n  \"dribbling\": [],\n  \"curve\": [],\n  \"fk_accuracy\": [],\n  \"long_passing\": [],\n  \"ball_control\": [],\n  \"acceleration\": [],\n  \"sprint_speed\": [],\n  \"agility\": [],\n  \"reactions\": [],\n  \"balance\": [],\n  \"shot_power\": [],\n  \"jumping\": [],\n  \"stamina\": [],\n  \"strength\": [],\n  \"long_shots\": [],\n  \"aggression\": [],\n  \"interceptions\": [],\n  \"positioning\": [],\n  \"vision\": [],\n  \"penalties\": [],\n  \"composure\": [],\n  \"defensive_awareness\": [],\n  \"standing_tackle\": [],\n  \"sliding_tackle\": [],\n  \"gk_diving\": [],\n  \"gk_handling\": [],\n  \"gk_kicking\": [],\n  \"gk_positioning\": [],\n  \"gk_reflexes\": []\n}\nfor player_id in players_dataframe.id:\n  a = 0\n  #Web-Scrape to get fifa stats from webpage\n  base_url = \"https://sofifa.com/player/\" + player_id\n  req = requests.Session()\n  page = req.get(base_url, headers = {\n    \"User-Agent\": \"Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.3; Win64; x64)\"\n  })\n  soup = BeautifulSoup(page.content, \"html.parser\")\n  \n  #After successful web scrape, grab all stats from page, scrape away ones we don't need, append values to fifa dict\n  player_stats = soup.find_all(class_=re.compile(\"bp3-tag p p-\"))\n  #print(len(player_stats))\n  if len(player_stats) == 66:\n    del player_stats[0:32] #Remove initial entries in list as we only care about the player stats\n  else:\n    del player_stats[0:31] #Some players have only 65 calls bp3-tag objects, take care of those instances as well\n  for stat in fifa_stats:\n    fifa_stats[stat].append(int(player_stats[a].get_text()))\n    a = a + 1\n  fifa_stats_df=pd.DataFrame(fifa_stats)\n\n#Now we can join together these two dataframes\nplayer_stats_df = pd.concat([players_dataframe, fifa_stats_df], axis=1, join=\"inner\")\nprint(player_stats_df.head(5))\n\n   last_name age  overall potential               team      value    wage  \\\n0  De Bruyne  31       91        91    Manchester City  107000000  350000   \n1    Haaland  21       90        94    Manchester City  176000000  240000   \n2      Salah  30       89        89          Liverpool   99000000  260000   \n3    Alisson  29       89        90          Liverpool   79000000  190000   \n4   Casemiro  30       89        89  Manchester United   86000000  240000   \n\n  stats      id position_1  ... penalties composure defensive_awareness  \\\n0  2299  192985         CM  ...        83        88                  66   \n1  2144  239085         ST  ...        84        87                  41   \n2  2208  209331         RW  ...        81        90                  38   \n3  1437  212831         GK  ...        23        66                  15   \n4  2251  200145        CDM  ...        66        85                  90   \n\n  standing_tackle  sliding_tackle  gk_diving  gk_handling  gk_kicking  \\\n0              66              53         15           13           5   \n1              53              29          7           14          13   \n2              43              41         14           14           9   \n3              19              16         86           85          85   \n4              89              88         13           14          16   \n\n   gk_positioning  gk_reflexes  \n0              10           13  \n1              11            7  \n2              11           14  \n3              90           89  \n4              12           12  \n\n[5 rows x 48 columns]\n\n\nLooking good! Now we have a nicely sized dataframe that stores all data and stats of our webscraped players. Since this is mostly cleaned and ready for usage, we can now move onto creating our radar plots!"
  },
  {
    "objectID": "posts/fifa_spider_plots/index.html#visualizations",
    "href": "posts/fifa_spider_plots/index.html#visualizations",
    "title": "Fifa Radar Plots",
    "section": "",
    "text": "Just for the fun of it we’ll make a correlation matrix to see what stats most heavily influence a player’s overall rating because I think that it would be interesting to see if this is simply an average of all statistics for players or if the overall is more dependent on certain stats.\n\n#Convert overall to int, add to player stats df, create correlation heatmap \ncorrmat = fifa_stats_df.join(players_dataframe[\"overall\"]).corr()\nsns.heatmap(corrmat, square=True)\n\n&lt;Axes: &gt;\n\n\n\n\n\nFor our next little project, we will be moving onto the spider plots.\nI liked the idea of grouping the players’ stats into categories, as a radar plot with as many points as we have columns would not be a great visualization. I decided to group the stats into different categories based on their function. Once we make those categories, we can then simply take the average of the datapoints in them and use that as one of values to plot on the Radar plot.\n\n#for usage later in dataframe\nnames = [\"attacking\", \"passing\", \"physicality\", \"pace\", \"dribbling\", \"mentality\", \"defending\", \"goalkeeping\"]\naverage = [0, 0, 0, 0, 0, 0, 0, 0]\n\n#create loop to make categories for each player\nfor index, row in player_stats_df.iterrows():\n  \n  #First assign values to a list, then map them as INT, then get mean. Repeat for every point of radar plot\n  attacking_col = [row[\"finishing\"], row[\"heading_accuracy\"], row[\"volleys\"], row[\"shot_power\"], row[\"long_shots\"]]\n  attacking_col = list(map(int, attacking_col))\n  average[0] = np.mean(attacking_col)\n  \n  passing_col = [row[\"short_passing\"], row[\"long_passing\"], row[\"crossing\"], row[\"fk_accuracy\"]]\n  passing_col = list(map(int, passing_col))\n  average[1] = np.mean(passing_col)\n  \n  physicality_col = [row[\"reactions\"], row[\"balance\"], row[\"strength\"], row[\"jumping\"]]\n  physicality_col = list(map(int, physicality_col))\n  average[2] = np.mean(physicality_col)\n  \n  pace_col = [row[\"acceleration\"], row[\"sprint_speed\"], row[\"agility\"]]\n  pace_col = list(map(int, pace_col))\n  average[3] = np.mean(pace_col)\n  \n  dribbling_col = [row[\"dribbling\"], row[\"ball_control\"]]\n  dribbling_col = list(map(int, dribbling_col))\n  average[4] = np.mean(dribbling_col)\n  \n  mentality_col = [row[\"aggression\"], row[\"positioning\"], row[\"vision\"], row[\"composure\"]]\n  mentality_col = list(map(int, mentality_col))\n  average[5] = np.mean(mentality_col)\n  \n  defending_col = [row[\"interceptions\"], row[\"defensive_awareness\"], row[\"standing_tackle\"], row[\"sliding_tackle\"]]\n  defending_col = list(map(int, defending_col))\n  average[6] = np.mean(defending_col)\n  \n  goalkeeping_col = [row[\"gk_diving\"], row[\"gk_handling\"], row[\"gk_kicking\"], row[\"gk_positioning\"], row[\"gk_reflexes\"]]\n  goalkeeping_col = list(map(int, goalkeeping_col))\n  average[7] = np.mean(goalkeeping_col)\n  \n  #Create dataframe to make radar plot\n  data_dict = {\"names\": names, \"average\": average} \n  df = pd.DataFrame(data_dict)\n  \n  #Create and show graphs for every player\n  fig = px.line_polar(df, r=\"average\", theta =\"names\", line_close=True)\n  fig.update_traces(fill=\"toself\")\n  print(\"Player:\", row[\"last_name\"],\",\", \"Overall:\", row[\"overall\"],\",\",  \"Position:\", row[\"position_1\"])\n  fig.show()\n\nPlayer: De Bruyne , Overall: 91 , Position: CM\nPlayer: Haaland , Overall: 90 , Position: ST\nPlayer: Salah , Overall: 89 , Position: RW\nPlayer: Alisson , Overall: 89 , Position: GK\nPlayer: Casemiro , Overall: 89 , Position: CDM\nPlayer: Kane , Overall: 89 , Position: ST\nPlayer: van Dijk , Overall: 88 , Position: CB\nPlayer: Ederson , Overall: 88 , Position: GK\nPlayer: Bernardo Silva , Overall: 88 , Position: CM\nPlayer: Rúben Dias , Overall: 88 , Position: CB\nPlayer: Son , Overall: 88 , Position: LW\nPlayer: Kanté , Overall: 87 , Position: CDM\nPlayer: Rodri , Overall: 87 , Position: CDM\nPlayer: De Gea , Overall: 87 , Position: GK\nPlayer: Bruno Fernandes , Overall: 87 , Position: CAM\nPlayer: Ødegaard , Overall: 86 , Position: CAM\nPlayer: Robertson , Overall: 86 , Position: LB\nPlayer: Laporte , Overall: 86 , Position: CB\nPlayer: Navas , Overall: 86 , Position: GK\nPlayer: Partey , Overall: 85 , Position: CDM\nPlayer: Saka , Overall: 85 , Position: RW\nPlayer: Martínez , Overall: 85 , Position: GK\nPlayer: Thiago Silva , Overall: 85 , Position: CB\nPlayer: Sterling , Overall: 85 , Position: LW\nPlayer: Thiago , Overall: 85 , Position: CM\nPlayer: Fabinho , Overall: 85 , Position: CDM\nPlayer: Alexander-Arnold , Overall: 85 , Position: RB\nPlayer: Gündoğan , Overall: 85 , Position: CM\nPlayer: Mahrez , Overall: 85 , Position: RW\nPlayer: Varane , Overall: 85 , Position: CB\nPlayer: Rashford , Overall: 85 , Position: LW\nPlayer: Jorginho , Overall: 84 , Position: CM\nPlayer: Gabriel Jesus , Overall: 84 , Position: ST\nPlayer: Koulibaly , Overall: 84 , Position: CB\nPlayer: James , Overall: 84 , Position: RWB\nPlayer: Diogo Jota , Overall: 84 , Position: CF\nPlayer: Díaz , Overall: 84 , Position: LW\nPlayer: Walker , Overall: 84 , Position: RB\nPlayer: Grealish , Overall: 84 , Position: LW\nPlayer: Foden , Overall: 84 , Position: LW\nPlayer: Trippier , Overall: 84 , Position: RB\nPlayer: Bruno Guimarães , Overall: 84 , Position: CM\nPlayer: Lloris , Overall: 84 , Position: GK\nPlayer: Højbjerg , Overall: 84 , Position: CDM\nPlayer: Rice , Overall: 84 , Position: CDM\nPlayer: Maddison , Overall: 84 , Position: RM\nPlayer: Ramsdale , Overall: 83 , Position: GK\nPlayer: Saliba , Overall: 83 , Position: CB\nPlayer: Mendy , Overall: 83 , Position: GK\nPlayer: Havertz , Overall: 83 , Position: CAM\nPlayer: João Félix , Overall: 83 , Position: CF\nPlayer: Roberto Firmino , Overall: 83 , Position: CF\nPlayer: Gakpo , Overall: 83 , Position: CF\nPlayer: Stones , Overall: 83 , Position: CB\nPlayer: Eriksen , Overall: 83 , Position: CM\nPlayer: Martínez , Overall: 83 , Position: CB\nPlayer: Pope , Overall: 83 , Position: GK\nPlayer: Botman , Overall: 83 , Position: CB\nPlayer: Romero , Overall: 83 , Position: CB\nPlayer: Tielemans , Overall: 83 , Position: CM\n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\n\n                                                \n\n\nAnd there we go! They’re not the most informative or beatiful visualizations, but they were largely just for practice in webscraping anyways. This was an excellent project that familiarized myself with the ins and outs of web scraping."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Site!",
    "section": "",
    "text": "This is my first post in a Quarto blog. Welcome!\nWhile this site is mostly about my experience with data and statistics, when I am not playing with data sets, you can most often find me hiking, playing soccer, or just hanging out with my dog. Here’s a picture of me and some of my soccer buddies.\n\nMy name is Ryan Curtis. I am a young professional looking to break into the world of data. While my undergraduate academic career was the genesis of my interest in statistics, my professional development working at the court has cemented my interest and passion for the field.\nI was intially hired a court clerk, performing clerical and customer-centric duties as well as assiting the judge and clerking court proceedings. One day, a yearly survey on probation population came in from the Bureau of Justice Statistics. I leaped at the opportunity to work on a project such as it and my supervisor agreed. I became acquainted with query-based software BIT (Businesses Intelligence Tools) which allowed me to create queries to search and manage our case management database which is made of tens of thousands of cases as it tracks every case since the 90’s. Upon completing and submitting the survey, I continued to utilize BIT in conjunction with Microsoft Excel to create tables and visualizations of court data for evaluation by our court administrator and Judge. This way I also became our pseudo court statistician and was promoted to Court Coordinator for our budding Therapeutic Court program.\nIt then became my responsibility to track data on all participants for usage in evaluations, grants, and surveys, eventually applying for and securing further funding for our program with this very data. I took it upon myself to learn Python in order to enhance my ability to interpret and create visualizations from our data. Since then I have created a number of visualizations and reports for the court for a plethora of purposes ranging from usage in grant applications to secure funding, to evaluations conducted by other agencies or the court itself. My experience working with python has also lead me to conduct some personal side projects solely in the interest of my own curiousity and development (you can check them out on the projects tab on my page!) My time in the professional field of data has been brief but I am excited to continue my journey and enhance both myself and the world around me through the usage of data!"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Fifa Radar Plots\n\n\n\n\n\n\n\nweb-scraping\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJul 13, 2023\n\n\nRyan Curtis\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Site!\n\n\n\n\n\n\n\nnews\n\n\nabout me\n\n\npost\n\n\n\n\n\n\n\n\n\n\n\nJul 11, 2023\n\n\nRyan Curtis\n\n\n\n\n\n\n  \n\n\n\n\nCS50 Lesson 1\n\n\n\n\n\n\n\nCS50\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJan 7, 2023\n\n\nRyan curtis\n\n\n\n\n\n\nNo matching items"
  }
]